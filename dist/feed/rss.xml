<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Tomer Aberbach</title>
        <link>https://tomeraberba.ch</link>
        <description>Tomer Aberbach</description>
        <lastBuildDate>Tue, 31 Mar 2020 00:09:13 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <image>
            <title>Tomer Aberbach</title>
            <url>https://tomeraberba.ch/img/icon.png</url>
            <link>https://tomeraberba.ch</link>
        </image>
        <copyright>2018 Tomer Aberbach</copyright>
        <category>Technology</category>
        <atom:link href="https://tomeraberba.ch/feed/rss.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Tomer Aberbach]]></title>
            <link>https://tomeraberba.ch/html/post/checking-for-the-absence-of-a-value-in-javascript.html</link>
            <guid>https://tomeraberba.ch/html/post/checking-for-the-absence-of-a-value-in-javascript.html</guid>
            <pubDate>Thu, 16 Aug 2018 04:00:00 GMT</pubDate>
            <description><![CDATA[A thorough overview of the right way to check for the absence of a value in JavaScript.]]></description>
            <content:encoded><![CDATA[<p>When I first started learning JavaScript I was confused by the seemingly endless ways developers check for the absence of a value:</p>
<pre><code class="hljs language-js"><span class="hljs-built_in">console</span>.log(value == <span class="hljs-literal">null</span>)
<span class="hljs-built_in">console</span>.log(value === <span class="hljs-literal">null</span>)
<span class="hljs-built_in">console</span>.log(value == <span class="hljs-literal">undefined</span>)
<span class="hljs-built_in">console</span>.log(value === <span class="hljs-literal">undefined</span>)
<span class="hljs-built_in">console</span>.log(value === <span class="hljs-literal">undefined</span> || value === <span class="hljs-literal">null</span>)
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">'undefined'</span>)
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> value == <span class="hljs-string">'undefined'</span>)
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">'undefined'</span> || value === <span class="hljs-literal">null</span>)
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">'undefined'</span> || value == <span class="hljs-literal">null</span>)
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> value == <span class="hljs-string">'undefined'</span> || value == <span class="hljs-literal">null</span>)
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> value == <span class="hljs-string">'undefined'</span> || value === <span class="hljs-literal">null</span>)
<span class="hljs-built_in">console</span>.log(!value)
</code></pre>
<p>Which one is right?</p>
<h2 id="the-absence-of-a-value">The Absence of a Value <a class="header-anchor" href="#the-absence-of-a-value" aria-hidden="true">¶</a></h2>
<p>In order to understand which of these expressions is correct we must first take a look at the two ways JavaScript represents the lack of a value.</p>
<h3 id="undefined">Undefined <a class="header-anchor" href="#undefined" aria-hidden="true">¶</a></h3>
<p><code>undefined</code> is one of JavaScript’s primitive types which means checking its type using the <code>typeof</code> operator returns the string <code>'undefined'</code>:</p>
<pre><code class="hljs language-js"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>) <span class="hljs-comment">// undefined</span>
</code></pre>
<p>It is the default value of any declared, but unassigned variable:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">var</span> x
<span class="hljs-built_in">console</span>.log(x) <span class="hljs-comment">// undefined</span>
</code></pre>
<p>It is the value returned when trying to access an undeclared object property:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">var</span> obj = {}
<span class="hljs-built_in">console</span>.log(obj.a) <span class="hljs-comment">// undefined</span>
</code></pre>
<p>It is the default return value of a function which does not return:</p>
<pre><code class="hljs language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>{}
<span class="hljs-built_in">console</span>.log(f()) <span class="hljs-comment">// undefined</span>
</code></pre>
<p>It is returned by the <code>void</code> operator, an operator which evaluates an expression and then returns <code>undefined</code>:</p>
<pre><code class="hljs language-js"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">void</span> <span class="hljs-number">0</span>) <span class="hljs-comment">// undefined</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">void</span> <span class="hljs-string">'hello'</span>) <span class="hljs-comment">// undefined</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">void</span>(<span class="hljs-number">3</span> + <span class="hljs-number">2</span>)) <span class="hljs-comment">// undefined</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">void</span>(<span class="hljs-comment">/* any expression */</span>)) <span class="hljs-comment">// undefined</span>
</code></pre>
<p>And lastly, it is not a literal. It is a property of the <a href="https://developer.mozilla.org/en-US/docs/Glossary/Global_object" class="external-a" target="_blank" rel="noopener">global object</a>, an object that always exists in the global scope (accessible through the <code>window</code> property on browsers).</p>
<h3 id="null">Null <a class="header-anchor" href="#null" aria-hidden="true">¶</a></h3>
<p><code>null</code> is also a JavaScript primitive type, but checking its type using the <code>typeof</code> operator does not return what you’d expect:</p>
<pre><code class="hljs language-js"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>) <span class="hljs-comment">// object</span>
</code></pre>
<p>According to <a href="https://www.w3schools.com/js/js_datatypes.asp" class="external-a" target="_blank" rel="noopener">W3Schools</a> you can consider this behavior a bug in JavaScript. <code>typeof null</code> should return <code>'null'</code>, but since a lot of code has already been written with the assumption that <code>typeof null</code> erroneously returns <code>'object'</code>, it will not be changed to avoid breaking old code.</p>
<p>Unlike <code>undefined</code>, <code>null</code> does not show up as a default value anywhere. Instead it is usually returned by functions which are expected to return an object when one could not be retrieved from the given parameters.</p>
<p>For example, in browsers <code>document.getElementById</code> returns <code>null</code> if no element with the given ID was found in the HTML document:</p>
<pre><code class="hljs language-js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'some-id-which-no-element-has'</span>)) <span class="hljs-comment">// null</span>
</code></pre>
<p>In contrast to <code>undefined</code>, <code>null</code> <em>is</em> a literal. It is not the identifier of some property. It represents a lack of identification.</p>
<p>Based on these characteristics it is safe to say that both <code>undefined</code> and <code>null</code> represent the absence of a value. Therefore, any code we write which aims to check for the absence of a value should account for both <code>undefined</code> and <code>null</code>.</p>
<h2 id="equality">Equality <a class="header-anchor" href="#equality" aria-hidden="true">¶</a></h2>
<p>Now that we understand <code>undefined</code> and <code>null</code>, we still need to briefly address the difference between <code>==</code> and <code>===</code> in order to understand the expressions at the beginning of this post.</p>
<h3 id="strict">Strict <a class="header-anchor" href="#strict" aria-hidden="true">¶</a></h3>
<p>Strict equality is invoked using <code>===</code> and is relatively straight forward. If two values, <code>a</code> and <code>b</code>, are of different types then <code>a === b</code> will return <code>false</code>. However, if they are of the same type then <code>true</code> is returned if their contents match and <code>false</code> otherwise:</p>
<p>Examples:</p>
<pre><code class="hljs language-js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span> === <span class="hljs-number">0</span>) <span class="hljs-comment">// true</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'hello!'</span> === <span class="hljs-string">'hello!'</span>) <span class="hljs-comment">// true</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span> === <span class="hljs-literal">null</span>) <span class="hljs-comment">// true</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-literal">undefined</span> === <span class="hljs-literal">undefined</span>) <span class="hljs-comment">// true</span>

<span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span> === <span class="hljs-number">5</span>) <span class="hljs-comment">// false</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span> === <span class="hljs-string">'0'</span>) <span class="hljs-comment">// false</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span> === <span class="hljs-string">'hello!'</span>) <span class="hljs-comment">// false</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span> === <span class="hljs-literal">undefined</span>) <span class="hljs-comment">// false</span>

<span class="hljs-keyword">var</span> obj = {}
<span class="hljs-built_in">console</span>.log(obj === {}) <span class="hljs-comment">// false (because objects are compared by reference)</span>
<span class="hljs-built_in">console</span>.log(obj === obj) <span class="hljs-comment">// true (because reference to same object)</span>
</code></pre>
<h3 id="loose">Loose <a class="header-anchor" href="#loose" aria-hidden="true">¶</a></h3>
<p>Loose quality is invoked using <code>==</code> and often produces unexpected results. If two values, <code>a</code> and <code>b</code>, are of the same type then <code>a === b</code> is returned. However, if they are of different types then JavaScript will attempt to coerce (i.e. convert) the two values to the same type and then strictly equate the two. This second case has prompted the use of loose equality to be largely discouraged by the JavaScript community:</p>
<p>Examples:</p>
<pre><code class="hljs language-js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> == <span class="hljs-number">1</span>) <span class="hljs-comment">// true</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> == <span class="hljs-string">'1'</span>) <span class="hljs-comment">// true (because the string was converted to a number)</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'1'</span> == <span class="hljs-number">1</span>) <span class="hljs-comment">// true (because the string was converted to a number)</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span> == <span class="hljs-literal">false</span>) <span class="hljs-comment">// true (because the boolean was converted to a number)</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span> == <span class="hljs-literal">null</span>) <span class="hljs-comment">// false (because absence of a value is never considered equal to a concrete value)</span>
<span class="hljs-built_in">console</span>.log({} == {}) <span class="hljs-comment">// false (because objects are compared by reference)</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span> == <span class="hljs-literal">undefined</span>) <span class="hljs-comment">// false (because absence of a value is never considered equal to a concrete value)</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span>) <span class="hljs-comment">// true (because both represent the absence of a value)</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-literal">undefined</span> == <span class="hljs-literal">null</span>) <span class="hljs-comment">// true (because both represent the absence of a value)</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">"hello!"</span> == <span class="hljs-literal">false</span>) <span class="hljs-comment">// false</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">""</span> == <span class="hljs-literal">false</span>) <span class="hljs-comment">// true (because the string was converted to a boolean and an empty string kind of represents falsity in the realm of strings I guess?)</span>
<span class="hljs-built_in">console</span>.log([] == <span class="hljs-literal">false</span>) <span class="hljs-comment">// true (because the array was converted to a boolean and an empty array kind of represents falsity in the realm of array I guess?)</span>
</code></pre>
<p>If you’re feeling confused you wouldn’t be the only one. Check out this <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using" class="external-a" target="_blank" rel="noopener">operand conversion table</a> and this <a href="https://www.sitepoint.com/javascript-truthy-falsy" class="external-a" target="_blank" rel="noopener">article</a> about truthy and falsey values if you want to fully understand loose equality. Additionally, if you want a handy reference of how <code>==</code> and <code>===</code> behave then I would recommend this <a href="https://dorey.github.io/JavaScript-Equality-Table/unified" class="external-a" target="_blank" rel="noopener">link</a>.</p>
<h2 id="bringing-it-all-together">Bringing It All Together <a class="header-anchor" href="#bringing-it-all-together" aria-hidden="true">¶</a></h2>
<p>It’s time to check which of the expressions from the beginning of the post work! Let’s take a look at the first expression and write a checklist to evaluate it:</p>
<pre><code class="hljs language-js"><span class="hljs-built_in">console</span>.log(value == <span class="hljs-literal">null</span>)
</code></pre>
<ul>
<li><em>Does it return <code>true</code> on <code>undefined</code>?</em> Yes, because substituting <code>undefined</code> for <code>value</code> yields <code>undefined == null</code> and as we have learned from the loose equality section, <code>undefined</code> and <code>null</code> are loosely equal because both represent the absence of a value.</li>
<li><em>Does it return <code>true</code> on <code>null</code>?</em> Yes, because substituting <code>null</code> for <code>value</code> yields <code>null == null</code> which obviously returns <code>true</code>.</li>
<li><em>Does it return <code>false</code> on everything else?</em> Yes, because as we have learned from the loose equality section, <code>null</code> is not loosely equal to anything other than itself and <code>undefined</code> because the absence of a value is never considered equal to a concrete value.</li>
</ul>
<p>You may have noticed that <code>value == undefined</code> would also work for almost the same reasons. However, <code>value == null</code> is safer because the value of <code>undefined</code> is not guaranteed to stay constant. Prior to JavaScript version ES5 <code>undefined</code> could be reassigned since it’s simply a global property and even in the most recent versions of JavaScript <code>undefined</code> can be shadowed by a local variable. This could never happen with <code>null</code> because it is a literal and that makes it the objectively better choice.</p>
<p>It is worth noting that these issues with <code>undefined</code> can be avoided by using the <code>void</code> operator instead because it is guaranteed to return the expected value of <code>undefined</code>. Most commonly, the expression passed to the <code>void</code> operator for this purpose is <code>0</code> because <code>void 0</code> is short and quick to evaluate. However, I would still not recommend using <code>value == void 0</code> in place of <code>value == null</code> because it may confuse other programmers (many of which are unfamiliar with the <code>void</code> operator), <code>null</code> is two characters shorter than <code>void 0</code>, and <code>void 0</code> may be marginally slower than <code>null</code> since <code>0</code> must be evaluated before <code>undefined</code> is returned.</p>
<p>These methods work except for one lurking issue. All of our questions assume that we know for a fact that <code>value</code> has been declared and we have access to it. However, if <code>value</code> is undeclared our code will throw a <code>ReferenceError</code>. This may seem absurd because don’t we <em>always</em> know if a variable has been declared or not? Unfortunately this is not always the case.</p>
<p>Many JavaScript libraries aim to be platform agnostic. They are designed in such a way which allows them to run in the browser, on the server, or as a Node.js module. In Node.js there is a global variable <code>module</code> which can be used to export methods for use in other modules, but on the browser this variable is never declared. Therefore, if we execute <code>module == null</code> on Node.js it would return <code>false</code>, but on browsers it would throw a <code>ReferenceError</code>! One way to handle this issue would be to use <code>try</code> <code>catch</code> blocks to catch the <code>ReferenceError</code> and resume execution in the case we’re not running on Node.js:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">try</span> {
  value <span class="hljs-comment">// expression statement will throw a ReferenceError if value is an undeclared variable</span>
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'value is declared'</span>) <span class="hljs-comment">// will log if the previous statement did not throw an error</span>
} <span class="hljs-keyword">catch</span> (err) {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'value is undeclared'</span>) <span class="hljs-comment">// will log if a ReferenceError was thrown</span>
}
</code></pre>
<p>Note that if any code following the first statement in the <code>try</code> block throws an error for some other reason then the <code>catch</code> block would be executed even though <code>value</code> was declared. This issue can be avoided by checking that the thrown error was specifically a <code>ReferenceError</code> using the <code>instanceof</code> operator:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">try</span> {
  value
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'value is declared'</span>)
  <span class="hljs-comment">/* some potentially error-throwing code */</span>
} <span class="hljs-keyword">catch</span> (err) {
  <span class="hljs-keyword">if</span> (err <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">ReferenceError</span>) {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'value is undeclared'</span>)
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Some other error occurred'</span>)
  }
}
</code></pre>
<p>Note that this solution only works if the potentially error-throwing code does not also throw a <code>ReferenceError</code> because it would also match the if condition. I cannot think of any reason anyone would do this on purpose. This situation would likely arise due to misspelling the name of a declared variable. For this reason you should try to keep the code in the <code>try</code> <code>catch</code> blocks as short as possible. The if condition could also be altered to check the <code>ReferenceError</code> message <code>string</code> for our specific variable <code>err instanceof ReferenceError &amp;&amp; err.message.split(' ')[0] === 'value'</code>, but I do not recommend it because it assumes your code has misspelled variables names which can and should be debugged and fixed.</p>
<p>The code with the if condition kept the same is a good solution if you specifically want to check if a variable is declared or not. However, if you want to classify undeclared variables as absent values and lump them in with <code>undefined</code> and <code>null</code> then fortunately there is a better solution. It turns out that checking the type of an undeclared variable using the <code>typeof</code> operator will not throw a <code>ReferenceError</code>, but will return the string <code>'undefined'</code> instead. This is convenient because checking the type of a declared variable with a value of <code>undefined</code> using the <code>typeof</code> operator will also return the string <code>'undefined'</code>. So the expression <code>typeof value === 'undefined'</code> also checks off the first item on our checklist! However, it doesn’t take into account if <code>value</code> is <code>null</code> so we must add an additional check in an or clause:</p>
<pre><code class="hljs language-js"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">'undefined'</span> || value === <span class="hljs-literal">null</span>)
</code></pre>
<ul>
<li><em>Does it return <code>true</code> on when <code>value</code> is undeclared?</em> Yes, because checking the type of an undeclared variable using the <code>typeof</code> operator returns the string <code>'undefined'</code> which after substituting gives us <code>'undefined' === 'undefined'</code> in the first condition which obviously returns <code>true</code>, and because the first condition is <code>true</code> the expression short-circuits and allows us to avoid the <code>ReferenceError</code> which would have been caused by <code>value === null</code>. The prevention of the error-throwing code’s execution by short-circuiting shows why the order of the two conditions cannot be switched.</li>
<li><em>Does it return <code>true</code> on <code>undefined</code>?</em> Yes, because substituting <code>undefined</code> for <code>value</code> yields <code>typeof undefined === 'undefined'</code> in the first condition, which simplifies to <code>'undefined' === 'undefined'</code> and obviously returns <code>true</code>.</li>
<li><em>Does it return <code>true</code> on <code>null</code>?</em> Yes, because although substituting <code>null</code> for <code>value</code> in the first condition fails due to <code>typeof null === 'undefined'</code> simplifying to <code>'object' === 'undefined'</code>, substituting <code>null</code> for <code>value</code> in the second condition yields <code>null === null</code> which obviously returns <code>true</code>.</li>
<li><em>Does it return <code>false</code> on everything else?</em> Yes, because checking the type of any concrete value using the <code>typeof</code> operator will not return <code>'undefined'</code> so the first condition returns <code>false</code>, and substituting any concrete value in the second condition will also return <code>false</code> because <code>null</code> is only strictly equal to itself.</li>
</ul>
<p>This method works in every situation, but it is slower than <code>value == null</code>. The optimal strategy is to use this method when you don’t know if <code>value</code> has been declared and use the previous method when you do. This is the approach taken by CoffeeScript when transpiling its <a href="https://coffeescript.org/#existential-operator" class="external-a" target="_blank" rel="noopener">existential operator</a> to JavaScript.</p>
<p>You may have noticed that a few of the expressions at the beginning of the post look almost identical to the expression we just evaluated. Interestingly enough the following four expressions share the same behavior:</p>
<pre><code class="hljs language-js"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">'undefined'</span> || value === <span class="hljs-literal">null</span>)
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">'undefined'</span> || value == <span class="hljs-literal">null</span>)
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> value == <span class="hljs-string">'undefined'</span> || value == <span class="hljs-literal">null</span>)
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> value == <span class="hljs-string">'undefined'</span> || value === <span class="hljs-literal">null</span>)
</code></pre>
<p>So why did we choose the expression with strict equality in both conditions?</p>
<ul>
<li>Strict equality is no slower than loose equality because they both check the operand types.</li>
<li>Strict equality is faster than loose equality when the types of the operands differ because it can immediately return <code>false</code> without having to coerce the operand types.</li>
<li>Loose equality often produces unexpected results and should be avoided if possible.</li>
</ul>
<p>The second bullet point makes a strong argument for using strict equality for the second condition because <code>value</code> may not be the same type as <code>null</code>, but in the first condition both <code>typeof value</code> and <code>'undefined'</code> are guaranteed to be of type <code>string</code> so the decision to use strict equality is only supported by the first and third bullet points. This makes the first expression above the best choice.</p>
<p>Lastly, let’s evaluate the rest of the expressions from the beginning of the post:</p>
<pre><code class="hljs language-js"><span class="hljs-built_in">console</span>.log(value === <span class="hljs-literal">null</span>) <span class="hljs-comment">// doesn't account for undefined</span>
<span class="hljs-built_in">console</span>.log(value === <span class="hljs-literal">undefined</span>) <span class="hljs-comment">// doesn't account for null</span>
<span class="hljs-built_in">console</span>.log(value === <span class="hljs-literal">undefined</span> || value === <span class="hljs-literal">null</span>) <span class="hljs-comment">// works, but is simply a slower version of value == null and value == undefined</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">'undefined'</span>) <span class="hljs-comment">// doesn't account for null</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> value == <span class="hljs-string">'undefined'</span>) <span class="hljs-comment">// doesn't account for null</span>
<span class="hljs-built_in">console</span>.log(!value) <span class="hljs-comment">// erroneously returns true for falsey values such as false, '', [], 0, etc.</span>
</code></pre>
<h2 id="object-properties">Object Properties <a class="header-anchor" href="#object-properties" aria-hidden="true">¶</a></h2>
<p>When checking for the absence of a value in an object property, additional considerations must be made regarding the property itself. Consider the following example where we use <code>value == null</code> to check for the absence of a value in each object’s <code>key</code> property:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">var</span> obj1 = {}
<span class="hljs-keyword">var</span> obj2 = {
  <span class="hljs-attr">key</span>: <span class="hljs-literal">undefined</span>
}

<span class="hljs-built_in">console</span>.log(obj1.key == <span class="hljs-literal">null</span>) <span class="hljs-comment">// true</span>
<span class="hljs-built_in">console</span>.log(obj2.key == <span class="hljs-literal">null</span>) <span class="hljs-comment">// true</span>
</code></pre>
<p>An object without a <code>key</code> property produces the same result as an object with its <code>key</code> property set to a value of <code>undefined</code>. This is because in contrast to undeclared variables, trying to access the value of an undeclared <em>property</em> always returns <code>undefined</code>. This means that <code>value == null</code> is a good solution if you want to classify undeclared properties as absent values and lump them in with <code>undefined</code> and <code>null</code>. However, if you specifically want to check if a property is declared or not then a different method must be used.</p>
<p>One way is to use the <code>in</code> operator:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">var</span> obj1 = {}
<span class="hljs-keyword">var</span> obj2 = {
  <span class="hljs-attr">key</span>: <span class="hljs-literal">undefined</span>
}

<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'key'</span> <span class="hljs-keyword">in</span> obj1) <span class="hljs-comment">// false</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'key'</span> <span class="hljs-keyword">in</span> obj2) <span class="hljs-comment">// true</span>
</code></pre>
<p>Note that a <code>string</code> or <code>Symbol</code> containing the property name must be used on the lefthand side of the <code>in</code> operator, not a token. This may seem like a good solution, but consider the following case:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">var</span> obj1 = {}
<span class="hljs-keyword">var</span> obj2 = {
  <span class="hljs-attr">constructor</span>: <span class="hljs-literal">undefined</span>
}

<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'constructor'</span> <span class="hljs-keyword">in</span> obj1) <span class="hljs-comment">// true</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'constructor'</span> <span class="hljs-keyword">in</span> obj2) <span class="hljs-comment">// true</span>
</code></pre>
<p>Probably not what you expected right? The expression <code>'constructor' in obj1</code> returns <code>true</code> because the <code>constructor</code> property was inherited from the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype" class="external-a" target="_blank" rel="noopener">object’s prototype chain</a>. This means that the <code>in</code> operator considers both the specific properties of the object as well as inherited properties.</p>
<p>Fortunately, there is a way to check just the specific uninherited properties of the object using the <code>hasOwnProperty</code> method, which itself is inherited from the <code>Object</code> constructor, or class in object oriented terms:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">var</span> obj1 = {}
<span class="hljs-keyword">var</span> obj2 = {
  <span class="hljs-attr">constructor</span>: <span class="hljs-literal">undefined</span>
}

<span class="hljs-built_in">console</span>.log(obj1.hasOwnProperty(<span class="hljs-string">'constructor'</span>)) <span class="hljs-comment">// false</span>
<span class="hljs-built_in">console</span>.log(obj2.hasOwnProperty(<span class="hljs-string">'constructor'</span>)) <span class="hljs-comment">// true</span>
</code></pre>
<p>Note that unlike the <code>in</code> operator, the <code>hasOwnProperty</code> method can only take a <code>string</code> argument. There is one caveat to using the <code>hasOwnProperty</code> method. Consider the following case:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">var</span> obj = {
  <span class="hljs-attr">hasOwnProperty</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
  }
}

<span class="hljs-built_in">console</span>.log(obj.hasOwnProperty(<span class="hljs-string">'wow'</span>)) <span class="hljs-comment">// true</span>
</code></pre>
<p>The <code>hasOwnProperty</code> method of the <code>Object</code> constructor was shadowed, or overridden in object oriented terms, by a method which always returns <code>true</code>. Accessing properties always prefers uninherited to inherited ones which is why <code>true</code> was returned for the name of an undeclared property. Fortunately there is a way around this. The <code>hasOwnProperty</code> method can be accessed directly from the <code>Object</code> constructor and called with <code>this</code> as a specified value using the <code>call</code> method of the <code>Function</code> constructor. The <code>call</code> method takes the value of <code>this</code> as its first argument and the arguments to the called function as the rest of its arguments:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">var</span> obj = {
  <span class="hljs-attr">hasOwnProperty</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
  }
}

<span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.hasOwnProperty.call(obj, <span class="hljs-string">'wow'</span>)) <span class="hljs-comment">// false</span>
</code></pre>
<p>If you find yourself using this method more than once I would recommend extracting it out as a function:</p>
<pre><code class="hljs language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hasOwnProperty</span>(<span class="hljs-params">obj, property</span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.prototype.hasOwnProperty.call(obj, property)
}

<span class="hljs-keyword">var</span> obj = {
  <span class="hljs-attr">hasOwnProperty</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
  }
}

<span class="hljs-built_in">console</span>.log(hasOwnProperty(obj, <span class="hljs-string">'wow'</span>)) <span class="hljs-comment">// false</span>
</code></pre>
<h2 id="conclusion">Conclusion <a class="header-anchor" href="#conclusion" aria-hidden="true">¶</a></h2>
<p>To recap here are the optimal expressions.</p>
<p>Checking if a variable is declared:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">try</span> {
  value
  <span class="hljs-comment">// value is declared</span>
} <span class="hljs-keyword">catch</span> (err) {
  <span class="hljs-keyword">if</span> (err <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">ReferenceError</span>) {
    <span class="hljs-comment">// value is undeclared</span>
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-comment">// some other error occurred</span>
  }
}
</code></pre>
<p>Checking for the absence of an uninherited property in an object when the object definitely doesn’t have a shadowing <code>hasOwnProperty</code> property:</p>
<pre><code class="hljs language-js">!obj.hasOwnProperty(key)
</code></pre>
<p>Checking for the existence of an uninherited property in an object when the object definitely doesn’t have a shadowing <code>hasOwnProperty</code> property:</p>
<pre><code class="hljs language-js">obj.hasOwnProperty(key)
</code></pre>
<p>Checking for the absence of an uninherited property in an object when the object may have a shadowing <code>hasOwnProperty</code> property:</p>
<pre><code class="hljs language-js">!<span class="hljs-built_in">Object</span>.prototype.hasOwnProperty.call(obj, key)
</code></pre>
<p>Checking for the existence of an uninherited property in an object when the object may have a shadowing <code>hasOwnProperty</code> property:</p>
<pre><code class="hljs language-js"><span class="hljs-built_in">Object</span>.prototype.hasOwnProperty.call(obj, key)
</code></pre>
<p>Checking for the absence of an inherited or uninherited property in an object:</p>
<pre><code class="hljs language-js">!(key <span class="hljs-keyword">in</span> obj)
</code></pre>
<p>Checking for the existence of an inherited or uninherited property in an object:</p>
<pre><code class="hljs language-js">key <span class="hljs-keyword">in</span> obj
</code></pre>
<p>Checking for the absence of a value when the value may be an undeclared variable:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">typeof</span> value === <span class="hljs-string">'undefined'</span> || value === <span class="hljs-literal">null</span>
</code></pre>
<p>Checking for the existence of a value when the value may be an undeclared variable (derived using <a href="https://en.wikipedia.org/wiki/De_Morgan%27s_laws#Negation_of_a_disjunction" class="external-a" target="_blank" rel="noopener">De Morgan’s Law</a>):</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">typeof</span> value !== <span class="hljs-string">'undefined'</span> &amp;&amp; value !== <span class="hljs-literal">null</span>
</code></pre>
<p>Checking for the absence of a value when the value is definitely declared:</p>
<pre><code class="hljs language-js">value == <span class="hljs-literal">null</span>
</code></pre>
<p>Checking for the existence of a value when the value is definitely declared:</p>
<pre><code class="hljs language-js">value != <span class="hljs-literal">null</span>
</code></pre>
<p>Checking for the absence of a value when the value is definitely declared and you want to avoid loose equality:</p>
<pre><code class="hljs language-js">value === <span class="hljs-literal">null</span> || value === <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>
</code></pre>
<p>Checking for the existence of a value when the value is definitely declared and you want to avoid loose equality (derived using <a href="https://en.wikipedia.org/wiki/De_Morgan%27s_laws#Negation_of_a_disjunction" class="external-a" target="_blank" rel="noopener">De Morgan’s Law</a>):</p>
<pre><code class="hljs language-js">value !== <span class="hljs-literal">null</span> &amp;&amp; value !== <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>
</code></pre>
<p>Feel free to use combinations of these to fit your needs. For example, here’s how you would check if an object has an uninherited property which has an absent value such as <code>undefined</code> or <code>null</code> when the object definitely doesn’t have a shadowing <code>hasOwnProperty</code> property:</p>
<pre><code class="hljs language-js">obj.hasOwnProperty(key) &amp;&amp; obj[key] == <span class="hljs-literal">null</span>
</code></pre>
<p>Thank you for reading!</p>
]]></content:encoded>
            <author>tomeraberbach@gmail.com (Tomer Aberbach)</author>
            <enclosure url="https://tomeraberba.ch/img/post/checking-for-the-absence-of-a-value-in-javascript.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[Tomer Aberbach]]></title>
            <link>https://tomeraberba.ch/html/post/src2img-cli.html</link>
            <guid>https://tomeraberba.ch/html/post/src2img-cli.html</guid>
            <pubDate>Tue, 14 Aug 2018 04:00:00 GMT</pubDate>
            <description><![CDATA[A CLI for converting source code to high quality images.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>Converts source code to high quality images.</p>
</blockquote>
<h2 id="install">Install <a class="header-anchor" href="#install" aria-hidden="true">¶</a></h2>
<p>Install with <a href="https://www.npmjs.com" class="external-a" target="_blank" rel="noopener">npm</a>:</p>
<pre><code class="hljs language-sh">$ npm i src2img-cli -g
</code></pre>
<p>If you encounter permission errors run the following instead:</p>
<pre><code class="hljs language-sh">$ sudo npm i src2img-cli -g --unsafe-perm=<span class="hljs-literal">true</span> --allow-root
</code></pre>
<p>The permission errors are related to <a href="https://www.npmjs.com/package/puppeteer" class="external-a" target="_blank" rel="noopener">puppeteer</a>. See this <a href="https://github.com/GoogleChrome/puppeteer/issues/1597" class="external-a" target="_blank" rel="noopener">issue</a>.</p>
<h2 id="usage">Usage <a class="header-anchor" href="#usage" aria-hidden="true">¶</a></h2>
<p>Display the help information:</p>
<pre><code class="hljs language-sh">$ src2img --<span class="hljs-built_in">help</span>
</code></pre>
<p>Output:</p>
<pre><code class="hljs">Usage: index [options] [command]

  Options:

    -V, --version                    output the version number
    -h, --help                       output usage information

  Commands:

    render [options] &lt;filenames...&gt;  converts source code to high quality images
    presets                          lists saved presets
    open                             opens the presets file
</code></pre>
<p>Display the render help information:</p>
<pre><code class="hljs language-sh">$ src2img render --<span class="hljs-built_in">help</span>
</code></pre>
<p>Output:</p>
<pre><code class="hljs">Usage: render [options] &lt;filenames...&gt;

  converts source code to high quality images

  Options:

    -o, --out &lt;dir&gt;      specifies an output directory (default: .)
    -t, --type &lt;type&gt;    specifies an output file type (png or jpeg) (default: png)
    -n, --port &lt;number&gt;  specifies a port number (default: 8888)
    -p, --preset &lt;name&gt;  uses a preset
    -h, --help           output usage information
</code></pre>
<p>Simple rendering example:</p>
<pre><code class="hljs language-sh">$ src2img render myfile.js
</code></pre>
<p>Follow the prompts as they pop up and feel free to save a preset! You can reuse a saved preset using the <code>-p</code> or <code>--preset</code> flag as shown above.</p>
<p>Note that the best way to increase the resolution of the rendered image is to choose a high font size in the prompts.</p>
<p>Some rendered code:</p>
<p><img src="/img/src2img-example.png" alt="example"></p>
<h2 id="related">Related <a class="header-anchor" href="#related" aria-hidden="true">¶</a></h2>
<ul>
<li><a href="https://www.npmjs.com/package/filename2prism" class="external-a" target="_blank" rel="noopener">filename2prism</a></li>
<li><a href="https://www.npmjs.com/package/src2img" class="external-a" target="_blank" rel="noopener">src2img</a></li>
</ul>
<h2 id="contributing">Contributing <a class="header-anchor" href="#contributing" aria-hidden="true">¶</a></h2>
<p>Pull requests and stars on the <a href="https://github.com/TomerAberbach/src2img-cli" class="external-a" target="_blank" rel="noopener">GitHub repository</a> are always welcome. For bugs and feature requests, <a href="https://github.com/TomerAberbach/src2img-cli/issues/new" class="external-a" target="_blank" rel="noopener">please create an issue</a>.</p>
<h2 id="running-tests">Running Tests <a class="header-anchor" href="#running-tests" aria-hidden="true">¶</a></h2>
<p>Install dev dependencies:</p>
<pre><code class="hljs language-sh">$ npm i -d &amp;&amp; npm <span class="hljs-built_in">test</span>
</code></pre>
<h2 id="license">License <a class="header-anchor" href="#license" aria-hidden="true">¶</a></h2>
<p>Copyright © 2018 Tomer Aberbach
Released under the <a href="https://github.com/TomerAberbach/src2img-cli/blob/master/LICENSE" class="external-a" target="_blank" rel="noopener">MIT license</a>.</p>
]]></content:encoded>
            <author>tomeraberbach@gmail.com (Tomer Aberbach)</author>
            <enclosure url="https://tomeraberba.ch/img/post/src2img-cli.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[Tomer Aberbach]]></title>
            <link>https://tomeraberba.ch/html/post/filename2prism.html</link>
            <guid>https://tomeraberba.ch/html/post/filename2prism.html</guid>
            <pubDate>Mon, 13 Aug 2018 04:00:00 GMT</pubDate>
            <description><![CDATA[Converts source code filenames to PrismJS language aliases.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>Converts source code filenames to PrismJS language aliases.</p>
</blockquote>
<h2 id="install">Install <a class="header-anchor" href="#install" aria-hidden="true">¶</a></h2>
<p>Install with <a href="https://www.npmjs.com" class="external-a" target="_blank" rel="noopener">npm</a>:</p>
<pre><code class="hljs language-sh">$ npm i filename2prism --save
</code></pre>
<h2 id="usage">Usage <a class="header-anchor" href="#usage" aria-hidden="true">¶</a></h2>
<p>The following reads a directory of source code files, highlights them according to their filenames, and then outputs the results to another directory:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)
<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)

<span class="hljs-keyword">const</span> filename2prism = <span class="hljs-built_in">require</span>(<span class="hljs-string">'filename2prism'</span>)
<span class="hljs-keyword">const</span> prism = <span class="hljs-built_in">require</span>(<span class="hljs-string">'prismjs'</span>)
<span class="hljs-built_in">require</span>(<span class="hljs-string">'prismjs/components/'</span>)() <span class="hljs-comment">// Loads all languages</span>

<span class="hljs-keyword">const</span> src = <span class="hljs-string">'path/to/some/src/dir'</span>
<span class="hljs-keyword">const</span> out = <span class="hljs-string">'path/to/some/out/dir'</span>

fs.readdirSync(src)
  .filter(<span class="hljs-function"><span class="hljs-params">name</span> =&gt;</span> fs.statSync(path.join(src, name)).isFile())
  .forEach(<span class="hljs-function"><span class="hljs-params">name</span> =&gt;</span> {
    <span class="hljs-keyword">let</span> alias = filename2prism(name)

    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> alias === <span class="hljs-string">'undefined'</span>) {
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'No matching language found from filename!'</span>)
    }

    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(alias)) {
      <span class="hljs-comment">// Multiple matches found, picked first one for simplicity</span>
      alias = alias[<span class="hljs-number">0</span>]
    } <span class="hljs-comment">// else one match was found</span>

    fs.writeFileSync(
      path.join(out, name),
      prism.highlight(
        fs.readFileSync(path.join(src, name)).toString(),
        prism.languages[alias],
        alias
      )
    )
  })
</code></pre>
<h2 id="method">Method <a class="header-anchor" href="#method" aria-hidden="true">¶</a></h2>
<p><code>filename2prism(filename) -&gt; string | Array&lt;string&gt; | undefined</code></p>
<p>Returns a PrismJS language alias from a filename. A <code>string</code> is returned if there was one match, an <code>Array&lt;string&gt;</code> is returned if there were multiple matches, and <code>undefined</code> is returned if there was no match.</p>
<p>Parameters:</p>
<ul>
<li><code>filename</code> : <code>string</code> - The filename to infer a PrismJS alias from.</li>
</ul>
<h2 id="related">Related <a class="header-anchor" href="#related" aria-hidden="true">¶</a></h2>
<ul>
<li><a href="https://www.npmjs.com/package/prismjs" class="external-a" target="_blank" rel="noopener">prismjs</a></li>
<li><a href="https://www.npmjs.com/package/src2img" class="external-a" target="_blank" rel="noopener">src2img</a></li>
<li><a href="https://www.npmjs.com/package/src2img-cli" class="external-a" target="_blank" rel="noopener">src2img-cli</a></li>
</ul>
<h2 id="contributing">Contributing <a class="header-anchor" href="#contributing" aria-hidden="true">¶</a></h2>
<p>Pull requests and stars on the <a href="https://github.com/TomerAberbach/filename2prism" class="external-a" target="_blank" rel="noopener">GitHub repository</a> are always welcome. For bugs and feature requests, <a href="https://github.com/TomerAberbach/filename2prism/issues/new" class="external-a" target="_blank" rel="noopener">please create an issue</a>.</p>
<h2 id="running-tests">Running Tests <a class="header-anchor" href="#running-tests" aria-hidden="true">¶</a></h2>
<p>Install dev dependencies:</p>
<pre><code class="hljs language-sh">$ npm i -d &amp;&amp; npm <span class="hljs-built_in">test</span>
</code></pre>
<h2 id="license">License <a class="header-anchor" href="#license" aria-hidden="true">¶</a></h2>
<p>Copyright © 2018 Tomer Aberbach
Released under the <a href="https://github.com/TomerAberbach/filename2prism/blob/master/LICENSE" class="external-a" target="_blank" rel="noopener">MIT license</a>.</p>
]]></content:encoded>
            <author>tomeraberbach@gmail.com (Tomer Aberbach)</author>
            <enclosure url="https://tomeraberba.ch/img/post/filename2prism.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[Tomer Aberbach]]></title>
            <link>https://tomeraberba.ch/html/post/src2img.html</link>
            <guid>https://tomeraberba.ch/html/post/src2img.html</guid>
            <pubDate>Mon, 13 Aug 2018 04:00:00 GMT</pubDate>
            <description><![CDATA[Converts source code to high quality images.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>Converts source code to high quality images.</p>
</blockquote>
<h2 id="install">Install <a class="header-anchor" href="#install" aria-hidden="true">¶</a></h2>
<p>Install with <a href="https://www.npmjs.com" class="external-a" target="_blank" rel="noopener">npm</a>:</p>
<pre><code class="hljs language-sh">$ npm i src2img --save
</code></pre>
<h2 id="usage">Usage <a class="header-anchor" href="#usage" aria-hidden="true">¶</a></h2>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)
<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)
<span class="hljs-keyword">const</span> src2img = <span class="hljs-built_in">require</span>(<span class="hljs-string">'src2img'</span>)

<span class="hljs-keyword">const</span> src = <span class="hljs-string">'path/to/sources'</span>
<span class="hljs-keyword">const</span> out = <span class="hljs-string">'path/to/out'</span>

<span class="hljs-keyword">const</span> names = fs.readdirSync(src)

src2img({
  <span class="hljs-attr">fontSize</span>: <span class="hljs-number">20</span>, <span class="hljs-comment">// Font size and unit control the size and quality of the image</span>
  fontSizeUnit: <span class="hljs-string">'pt'</span>,
  <span class="hljs-attr">padding</span>: <span class="hljs-number">3</span>,
  <span class="hljs-attr">paddingUnit</span>: <span class="hljs-string">'vw'</span>, <span class="hljs-comment">// Using 'px' does not scale with font size</span>
  type: <span class="hljs-string">'png'</span>, <span class="hljs-comment">// png or jpeg</span>
  src: names.map(<span class="hljs-function"><span class="hljs-params">name</span> =&gt;</span> [
    fs.readFileSync(path.join(src, name)).toString(),
    <span class="hljs-string">'javascript'</span> <span class="hljs-comment">// https://prismjs.com/index.html#languages-list</span>
    <span class="hljs-comment">// See https://www.npmjs.com/package/filename2prism for getting alias from filename</span>
  ])
}).then(<span class="hljs-function"><span class="hljs-params">images</span> =&gt;</span> <span class="hljs-built_in">Promise</span>.all(images.map(
  <span class="hljs-function">(<span class="hljs-params">image, i</span>) =&gt;</span> fs.writeFileSync(path.join(out, <span class="hljs-string">`<span class="hljs-subst">${names[i].replace(<span class="hljs-regexp">/\.[^.]+$/g</span>, <span class="hljs-string">''</span>)}</span>.png`</span>), image))
))
</code></pre>
<p>Look at the <a href="https://www.npmjs.com/package/src2img-cli" class="external-a" target="_blank" rel="noopener">CLI package</a> if you’d like to use this from the command line.</p>
<p>Some rendered code:</p>
<p><img src="/img/src2img-example.png" alt="example"></p>
<h2 id="related">Related <a class="header-anchor" href="#related" aria-hidden="true">¶</a></h2>
<ul>
<li><a href="https://www.npmjs.com/package/filename2prism" class="external-a" target="_blank" rel="noopener">filename2prism</a></li>
<li><a href="https://www.npmjs.com/package/src2img-cli" class="external-a" target="_blank" rel="noopener">src2img-cli</a></li>
<li><a href="https://www.npmjs.com/package/prismjs" class="external-a" target="_blank" rel="noopener">prismjs</a></li>
</ul>
<h2 id="contributing">Contributing <a class="header-anchor" href="#contributing" aria-hidden="true">¶</a></h2>
<p>Pull requests and stars on the <a href="https://www.npmjs.com/package/src2img" class="external-a" target="_blank" rel="noopener">GitHub repository</a> are always welcome. For bugs and feature requests, <a href="https://github.com/TomerAberbach/src2img/issues/new" class="external-a" target="_blank" rel="noopener">please create an issue</a>.</p>
<h2 id="running-tests">Running Tests <a class="header-anchor" href="#running-tests" aria-hidden="true">¶</a></h2>
<p>Install dev dependencies:</p>
<pre><code class="hljs language-sh">$ npm i -d &amp;&amp; npm <span class="hljs-built_in">test</span>
</code></pre>
<h2 id="license">License <a class="header-anchor" href="#license" aria-hidden="true">¶</a></h2>
<p>Copyright © 2018 Tomer Aberbach
Released under the <a href="https://github.com/TomerAberbach/src2img/blob/master/LICENSE" class="external-a" target="_blank" rel="noopener">MIT license</a>.</p>
]]></content:encoded>
            <author>tomeraberbach@gmail.com (Tomer Aberbach)</author>
            <enclosure url="https://tomeraberba.ch/img/post/src2img.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[Tomer Aberbach]]></title>
            <link>https://tomeraberba.ch/html/post/gulp-windowed.html</link>
            <guid>https://tomeraberba.ch/html/post/gulp-windowed.html</guid>
            <pubDate>Wed, 08 Aug 2018 04:00:00 GMT</pubDate>
            <description><![CDATA[A Gulp plugin that processes and maps files in windows/arrays of a specified size.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>Processes and maps files in windows/arrays of a specified size.</p>
</blockquote>
<h2 id="install">Install <a class="header-anchor" href="#install" aria-hidden="true">¶</a></h2>
<p>Install with <a href="https://www.npmjs.com" class="external-a" target="_blank" rel="noopener">npm</a>:</p>
<pre><code class="hljs language-sh">$ npm i gulp-windowed --save
</code></pre>
<h2 id="usage">Usage <a class="header-anchor" href="#usage" aria-hidden="true">¶</a></h2>
<p>This example concatenates groups of 5 markdown files. If <code>src/posts</code> contained files <code>post0.md</code> through <code>post99.md</code> then the next pipe would receive a stream containing <code>page0.md</code> through <code>page19.md</code> where <code>page0.md</code> is the concatenation of <code>post0.md</code> through <code>post4.md</code>. The ordering is guaranteed by the use of <a href="https://www.npmjs.com/package/gulp-sort" class="external-a" target="_blank" rel="noopener">gulp-sort</a>.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>)
<span class="hljs-keyword">const</span> sort = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-sorted'</span>)
<span class="hljs-keyword">const</span> windowed = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-windowed'</span>)
<span class="hljs-keyword">const</span> concat = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-concat'</span>)

gulp.task(<span class="hljs-string">'default'</span>, () =&gt;
  gulp.src(<span class="hljs-string">'src/posts/*.md'</span>) <span class="hljs-comment">// Posts in markdown</span>
    .pipe(sort()) <span class="hljs-comment">// Sorted by filename</span>
    .pipe(windowed(<span class="hljs-number">5</span>, (files, i) =&gt; <span class="hljs-comment">// In groups of 5</span>
      files.pipe(concat(<span class="hljs-string">`page<span class="hljs-subst">${i}</span>.md`</span>)) <span class="hljs-comment">// Concatenated into one page where 'i' is the window number</span>
    ))
    <span class="hljs-comment">// More pipes...</span>
)
</code></pre>
<p>Here it is used to split groups of files into different folders.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>)
<span class="hljs-keyword">const</span> windowed = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-windowed'</span>)
<span class="hljs-keyword">const</span> rename = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-rename'</span>)

gulp.task(<span class="hljs-string">'default'</span>, () =&gt;
  gulp.src(<span class="hljs-string">'src/*'</span>)
    .pipe(windowed(<span class="hljs-number">10</span>, (files, i, done) =&gt;
      files.pipe(rename({
        <span class="hljs-attr">dirname</span>: <span class="hljs-string">`folder<span class="hljs-subst">${i}</span>`</span>
      }))
    ))
    <span class="hljs-comment">// More pipes...</span>
)
</code></pre>
<p>Here it is used to skip every other file.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>)
<span class="hljs-keyword">const</span> windowed = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-windowed'</span>)

gulp.task(<span class="hljs-string">'default'</span>, () =&gt;
  gulp.src(<span class="hljs-string">'src/*'</span>)
    .pipe(windowed(<span class="hljs-number">1</span>, (files, i, done) =&gt;
      i % <span class="hljs-number">2</span> === <span class="hljs-number">0</span> ? files : done()
    ))
    <span class="hljs-comment">// More pipes...</span>
)
</code></pre>
<p>Notice that the stream of <code>File</code> objects in the callback can be returned from the callback. They are subsequently written to the resulting stream for the next pipe <em>outside</em> the callback. This is useful because it allows you to perform stream operations on the groups of files, while also allowing you to merge the resulting streams back together to continue performing operations.</p>
<p>If you’d like an array of <code>File</code> objects instead of a stream then call <code>windowed.array</code> instead.</p>
<h2 id="method">Method <a class="header-anchor" href="#method" aria-hidden="true">¶</a></h2>
<p><code>windowed(n, cb) -&gt; DuplexObjectStream&lt;File&gt;</code></p>
<p>Calls <code>cb</code> with a readable object stream (or array for <code>window.array</code>) containing <code>n</code> <a href="https://www.npmjs.com/package/vinyl" class="external-a" target="_blank" rel="noopener">vinyl</a> <code>File</code> objects each time <code>n</code> are written to it. On stream end if there are any remaining <code>File</code> objects because the <code>n</code> threshold was not met then <code>cb</code> is called with a readable object stream (or array for <code>window.array</code>) containing the remaining [0, <code>n</code>) <code>File</code> objects. The contents of the duplex object stream returned by the method depends on <code>cb</code> (explained below).</p>
<p>Parameters:</p>
<ul>
<li><code>n</code> : <code>int</code> - A number of <code>File</code> objects to include per window. Must be a positive integer.</li>
<li><code>cb</code> : <code>(files, i, done) -&gt; File | Array&lt;File&gt; | Promise&lt;File | Array&lt;File&gt; | *&gt; | Observable&lt;File | Array&lt;File&gt; | *&gt; | ChildProcess | ReadableObjectStream&lt;File&gt; | undefined</code> - A callback which either calls <code>done</code> or returns a <code>File</code> object, an array of <code>File</code> objects, or an asynchronous operation in some returnable format (see possible <code>cb</code> return types and <a href="https://www.npmjs.com/package/async-done" class="external-a" target="_blank" rel="noopener">async-done</a>). If an asynchronous operation is returned it will be resolved. If the result of <code>cb</code>, through calling <code>done</code> or returning an asynchronous operation, is a <code>File</code> object or an array of <code>File</code> objects then they will be written to the duplex object stream returned from <code>windowed</code>.
<ul>
<li><code>files</code> : <code>ReadableObjectStream&lt;File&gt; | Array&lt;File&gt;</code> - A readable object stream (or array for <code>window.array</code>) containing up to <code>n</code> <a href="https://www.npmjs.com/package/vinyl" class="external-a" target="_blank" rel="noopener">vinyl</a> <code>File</code> objects (see above from why not exactly <code>n</code>).</li>
<li><code>i</code> : <code>int</code> - The current zero-based window number (i.e. the number of times <code>cb</code> has been called minus one).</li>
<li><code>done</code> : <code>(err, result) -&gt; undefined</code> - Call <code>done(new Error(...))</code> for error or <code>done(null, result)</code> for success when performing asynchronous operations in non-returnable format or when performing strictly synchronous operations. This method does not need to be and should not be called if a valid value of the types mentioned above is returned from <code>cb</code>.</li>
</ul>
</li>
</ul>
<h2 id="pairs-well-with">Pairs Well With <a class="header-anchor" href="#pairs-well-with" aria-hidden="true">¶</a></h2>
<ul>
<li><a href="https://www.npmjs.com/package/gulp-sort" class="external-a" target="_blank" rel="noopener">gulp-sort</a></li>
<li><a href="https://www.npmjs.com/package/gulp-concat" class="external-a" target="_blank" rel="noopener">gulp-concat</a></li>
<li><a href="https://www.npmjs.com/package/gulp-rename" class="external-a" target="_blank" rel="noopener">gulp-rename</a></li>
<li><a href="https://www.npmjs.com/package/through2" class="external-a" target="_blank" rel="noopener">through2</a></li>
</ul>
<h2 id="contributing">Contributing <a class="header-anchor" href="#contributing" aria-hidden="true">¶</a></h2>
<p>Pull requests and stars on the <a href="https://github.com/TomerAberbach/gulp-windowed" class="external-a" target="_blank" rel="noopener">GitHub repository</a> are always welcome. For bugs and feature requests, <a href="https://github.com/TomerAberbach/gulp-windowed/issues/new" class="external-a" target="_blank" rel="noopener">please create an issue</a>.</p>
<h2 id="running-tests">Running Tests <a class="header-anchor" href="#running-tests" aria-hidden="true">¶</a></h2>
<p>Install dev dependencies:</p>
<pre><code class="hljs language-sh">$ npm i -d &amp;&amp; npm <span class="hljs-built_in">test</span>
</code></pre>
<h2 id="license">License <a class="header-anchor" href="#license" aria-hidden="true">¶</a></h2>
<p>Copyright © 2018 Tomer Aberbach
Released under the <a href="https://github.com/TomerAberbach/gulp-windowed/blob/master/LICENSE" class="external-a" target="_blank" rel="noopener">MIT license</a>.</p>
]]></content:encoded>
            <author>tomeraberbach@gmail.com (Tomer Aberbach)</author>
            <enclosure url="https://tomeraberba.ch/img/post/gulp-windowed.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[Tomer Aberbach]]></title>
            <link>https://tomeraberba.ch/html/post/broken-record.html</link>
            <guid>https://tomeraberba.ch/html/post/broken-record.html</guid>
            <pubDate>Tue, 07 Aug 2018 04:00:00 GMT</pubDate>
            <description><![CDATA[A Handlebars powered CLI tool for defining file and directory structure templates.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>A Handlebars powered CLI tool for defining file and directory structure templates.</p>
</blockquote>
<p>Repeatably setting up new projects the same way can be annoying.</p>
<p>Broken Record allows you to define templates which can then be invoked and filled out in hassle-free way.</p>
<h2 id="install">Install <a class="header-anchor" href="#install" aria-hidden="true">¶</a></h2>
<p>Install with <a href="https://www.npmjs.com" class="external-a" target="_blank" rel="noopener">npm</a>:</p>
<pre><code class="hljs language-sh">$ npm i broken-record -g
</code></pre>
<h2 id="usage">Usage <a class="header-anchor" href="#usage" aria-hidden="true">¶</a></h2>
<p>Show help information:</p>
<pre><code class="hljs language-sh">$ broken-record -h

Usage: broken-record [options] [<span class="hljs-built_in">command</span>]

  Options:

    -V, --version         output the version number
    -h, --<span class="hljs-built_in">help</span>            output usage information

  Commands:

    config [dir]          Displays or sets the templates directory
    register &lt;dir&gt;        Registers a template at a specified directory
    list                  Lists the available templates
    remove &lt;name&gt;         Removes a registered template
    get [options] &lt;name&gt;  Retrieves a registered template
    show [name]           Opens the templates directory or a template <span class="hljs-keyword">in</span> the file explorer

  Template Specification:

    Directory Structure:
      &lt;template-name&gt;
          ├── template &lt;-- template files directory
          └── template.json

    template.json:
      {
        <span class="hljs-string">"options"</span>: [
          {
            <span class="hljs-string">"name"</span>: <span class="hljs-string">"&lt;variable-name&gt;"</span>, &lt;-- required
            <span class="hljs-string">"message"</span>: <span class="hljs-string">"&lt;displayed-message&gt;"</span>, &lt;-- value of <span class="hljs-string">"name"</span> used by default,
            <span class="hljs-string">"value"</span>: <span class="hljs-string">"&lt;default-value-or-choices-array&gt;"</span> &lt;-- default value can be boolean
          },
          ...
        ],
        <span class="hljs-string">"embed"</span>: {
          <span class="hljs-string">"&lt;template-name&gt;"</span>: {
            <span class="hljs-string">"directory"</span>: <span class="hljs-string">"&lt;path-relative-to-template-dir&gt;"</span>, &lt;-- required
            <span class="hljs-string">"options"</span>: {
              <span class="hljs-string">"&lt;option1&gt;"</span>: <span class="hljs-string">"&lt;handlebars-template&gt;"</span>,
              ...
            }
          },
          ...
        }
      }
</code></pre>
<p>Set the templates directory location:</p>
<pre><code class="hljs language-sh">$ broken-record config
Looks like this is your first time running this <span class="hljs-built_in">command</span>!
? Where should the <span class="hljs-string">'templates'</span> directory be created? path/to/some/dir
path/to/some/dir
</code></pre>
<p>Try out an example:</p>
<pre><code class="hljs language-sh">$ git <span class="hljs-built_in">clone</span> https://github.com/TomerAberbach/broken-record-templates.git
$ <span class="hljs-built_in">cd</span> broken-record-templates
$ broken-record register mit
The provided template was successfully registered.
$ broken-record register js-npm-module
The provided template was successfully registered.
$ broken-record get js-npm-module
</code></pre>
<h2 id="related-projects">Related projects <a class="header-anchor" href="#related-projects" aria-hidden="true">¶</a></h2>
<ul>
<li><a href="https://github.com/TomerAberbach/broken-record-templates" class="external-a" target="_blank" rel="noopener">broken-record-templates</a></li>
</ul>
<h2 id="contributing">Contributing <a class="header-anchor" href="#contributing" aria-hidden="true">¶</a></h2>
<p>Pull requests and stars in the <a href="https://github.com/TomerAberbach/broken-record" class="external-a" target="_blank" rel="noopener">GitHub repository</a> are always welcome. For bugs and feature requests, <a href="https://github.com/TomerAberbach/broken-record/issues/new" class="external-a" target="_blank" rel="noopener">please create an issue</a>.</p>
<h2 id="running-tests">Running Tests <a class="header-anchor" href="#running-tests" aria-hidden="true">¶</a></h2>
<p>Install dev dependencies:</p>
<pre><code class="hljs language-sh">$ npm i -d &amp;&amp; npm <span class="hljs-built_in">test</span>
</code></pre>
<h2 id="license">License <a class="header-anchor" href="#license" aria-hidden="true">¶</a></h2>
<p>Copyright © 2018 Tomer Aberbach
Released under the <a href="https://github.com/TomerAberbach/broken-record/blob/master/LICENSE" class="external-a" target="_blank" rel="noopener">MIT license</a>.</p>
]]></content:encoded>
            <author>tomeraberbach@gmail.com (Tomer Aberbach)</author>
            <enclosure url="https://tomeraberba.ch/img/post/broken-record.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[Tomer Aberbach]]></title>
            <link>https://tomeraberba.ch/html/post/imgflip.html</link>
            <guid>https://tomeraberba.ch/html/post/imgflip.html</guid>
            <pubDate>Fri, 13 Jul 2018 04:00:00 GMT</pubDate>
            <description><![CDATA[A module for the interacting with the Imgflip API.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>A module for the interacting with the Imgflip API.</p>
</blockquote>
<h2 id="install">Install <a class="header-anchor" href="#install" aria-hidden="true">¶</a></h2>
<p>Install with <a href="https://www.npmjs.com" class="external-a" target="_blank" rel="noopener">npm</a>:</p>
<pre><code class="hljs language-sh">$ npm i imgflip --save
</code></pre>
<h2 id="usage">Usage <a class="header-anchor" href="#usage" aria-hidden="true">¶</a></h2>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> imgflip = <span class="hljs-built_in">require</span>(<span class="hljs-string">'imgflip'</span>)

<span class="hljs-comment">// https://imgflip.com/signup</span>
imgflip.credentials({
  <span class="hljs-attr">username</span>: <span class="hljs-string">'YOUR_USERNAME'</span>,
  <span class="hljs-attr">password</span>: <span class="hljs-string">'YOUR_PASSWORD'</span>
})

<span class="hljs-comment">/* https://api.imgflip.com/get_memes
 * Get top 100 popular meme formats
 */</span>
imgflip.memes().then(<span class="hljs-function"><span class="hljs-params">memes</span> =&gt;</span> {
  <span class="hljs-comment">// ID of the top meme</span>
  <span class="hljs-keyword">const</span> id = memes[<span class="hljs-number">0</span>][<span class="hljs-string">'id'</span>]

  <span class="hljs-comment">// Get URL instead using imgflip.meme, omit path argument</span>
  <span class="hljs-keyword">return</span> imgflip.image(<span class="hljs-string">'meme.jpg'</span>, id, <span class="hljs-string">'MEME'</span>, <span class="hljs-string">'CITY'</span>)
})
</code></pre>
<h2 id="contributing">Contributing <a class="header-anchor" href="#contributing" aria-hidden="true">¶</a></h2>
<p>Pull requests and stars on the <a href="https://github.com/TomerAberbach/imgflip" class="external-a" target="_blank" rel="noopener">GitHub repository</a> are always welcome. For bugs and feature requests, <a href="https://github.com/TomerAberbach/imgflip/issues/new" class="external-a" target="_blank" rel="noopener">please create an issue</a>.</p>
<h2 id="running-tests">Running Tests <a class="header-anchor" href="#running-tests" aria-hidden="true">¶</a></h2>
<p>Install dev dependencies:</p>
<pre><code class="hljs language-sh">$ npm i -d &amp;&amp; npm <span class="hljs-built_in">test</span>
</code></pre>
<h2 id="license">License <a class="header-anchor" href="#license" aria-hidden="true">¶</a></h2>
<p>Copyright © 2018 Tomer Aberbach
Released under the <a href="https://github.com/TomerAberbach/imgflip/blob/master/LICENSE" class="external-a" target="_blank" rel="noopener">MIT license</a>.</p>
]]></content:encoded>
            <author>tomeraberbach@gmail.com (Tomer Aberbach)</author>
            <enclosure url="https://tomeraberba.ch/img/post/imgflip.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[Tomer Aberbach]]></title>
            <link>https://tomeraberba.ch/html/post/tcnj-deploy.html</link>
            <guid>https://tomeraberba.ch/html/post/tcnj-deploy.html</guid>
            <pubDate>Tue, 19 Jun 2018 04:00:00 GMT</pubDate>
            <description><![CDATA[A bash script for easily deploying a directory of website files to your personal TCNJ website.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>A bash script for easily deploying a directory of website files to your personal TCNJ website at https://www.tcnj.edu/~username.</p>
</blockquote>
<h2 id="install">Install <a class="header-anchor" href="#install" aria-hidden="true">¶</a></h2>
<p>Clone the <a href="https://github.com/TomerAberbach/tcnj-deploy" class="external-a" target="_blank" rel="noopener">repository</a>:</p>
<pre><code class="hljs language-sh">$ git <span class="hljs-built_in">clone</span> https://github.com/TomerAberbach/tcnj-deploy.git
</code></pre>
<p>Or download the <code>tcnj-deploy.sh</code> file from <a href="https://raw.githubusercontent.com/TomerAberbach/tcnj-deploy/master/tcnj-deploy.sh" class="external-a" target="_blank" rel="noopener">here</a>.</p>
<h2 id="usage">Usage <a class="header-anchor" href="#usage" aria-hidden="true">¶</a></h2>
<pre><code class="hljs language-sh">$ ./tcnj-deploy.sh &lt;directory&gt;
</code></pre>
<p>Your <code>~/www</code> directory is cleared prior to copying your files so use with caution!</p>
<p>The proper permissions are set on your copied files for you.</p>
<p>The code can be seen here:</p>
<pre><code class="hljs language-bash"><span class="hljs-meta">#!/usr/bin/env bash
</span>
<span class="hljs-keyword">if</span> [[ -d <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> ]]; <span class="hljs-keyword">then</span>
    <span class="hljs-built_in">read</span> -p <span class="hljs-string">"This will overwrite everything in '~/www' with the contents of '<span class="hljs-variable">$1</span>'. Continue? (y/n) "</span> -n 1 -r
    <span class="hljs-built_in">echo</span>
    <span class="hljs-built_in">echo</span>

    <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$REPLY</span> =~ ^[Yy]$ ]]; <span class="hljs-keyword">then</span>
        <span class="hljs-built_in">read</span> -p <span class="hljs-string">"Username: "</span> -r username
        tar -c -C <span class="hljs-variable">$1</span> . | gzip -2 | ssh -o ConnectTimeout=10 <span class="hljs-string">"<span class="hljs-variable">$username</span>@beauty.tcnj.edu"</span> <span class="hljs-string">"rm -rf ~/www &gt; /dev/null; mkdir -p ~/www; tar -zx -C ~/www; cd ~/www; find -type d -exec chmod 755 {} \;; find -type f -exec chmod 644 {} \;; echo; echo \"Deployment successful!\""</span>
        
        <span class="hljs-keyword">if</span> [[ $? -ne 0 ]]; <span class="hljs-keyword">then</span>
            <span class="hljs-built_in">echo</span>
            <span class="hljs-built_in">echo</span> <span class="hljs-string">"Deployment failed!"</span>
            <span class="hljs-built_in">echo</span> <span class="hljs-string">"In order to use this command you must be connected to the TCNJ network or using a VPN."</span>
            
            <span class="hljs-keyword">if</span> [[ <span class="hljs-string">"<span class="hljs-variable">$(uname)</span>"</span> == <span class="hljs-string">"Darwin"</span> ]]; <span class="hljs-keyword">then</span>
                <span class="hljs-built_in">echo</span> <span class="hljs-string">"Mac VPN Tutorial: http://nts.pages.tcnj.edu/files/2014/08/PAN-VPN-Instructions.pdf"</span>
            <span class="hljs-keyword">elif</span> [[ <span class="hljs-string">"<span class="hljs-variable">$(expr substr $(uname -s)</span> 1 5)"</span> == <span class="hljs-string">"Linux"</span> ]]; <span class="hljs-keyword">then</span>
                <span class="hljs-built_in">echo</span> <span class="hljs-string">"Linux VPN Tutorial: https://tomeraberba.ch/html/post/tcnj-linux-vpn.html"</span>
            <span class="hljs-keyword">else</span>
                <span class="hljs-built_in">echo</span> <span class="hljs-string">"Windows VPN Tutorial: http://nts.pages.tcnj.edu/files/2014/08/PAN-VPN-Instructions.pdf"</span>
            <span class="hljs-keyword">fi</span>
        <span class="hljs-keyword">fi</span>
    <span class="hljs-keyword">fi</span>
<span class="hljs-keyword">else</span>
   <span class="hljs-built_in">echo</span> <span class="hljs-string">"Usage: ./tcnj-deploy.sh &lt;directory&gt;"</span>
<span class="hljs-keyword">fi</span>
</code></pre>
<h2 id="contributing">Contributing <a class="header-anchor" href="#contributing" aria-hidden="true">¶</a></h2>
<p>Pull requests and stars on the <a href="https://github.com/TomerAberbach/tcnj-deploy" class="external-a" target="_blank" rel="noopener">GitHub repository</a> are always welcome. For bugs and feature requests, <a href="https://github.com/TomerAberbach/tcnj-deploy/issues/new" class="external-a" target="_blank" rel="noopener">please create an issue</a>.</p>
<h2 id="license">License <a class="header-anchor" href="#license" aria-hidden="true">¶</a></h2>
<p>Copyright © 2018 Tomer Aberbach
Released under the <a href="https://github.com/TomerAberbach/tcnj-deploy/blob/master/LICENSE" class="external-a" target="_blank" rel="noopener">MIT license</a>.</p>
]]></content:encoded>
            <author>tomeraberbach@gmail.com (Tomer Aberbach)</author>
            <enclosure url="https://tomeraberba.ch/img/post/tcnj-deploy.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[Tomer Aberbach]]></title>
            <link>https://tomeraberba.ch/html/post/get-all-files.html</link>
            <guid>https://tomeraberba.ch/html/post/get-all-files.html</guid>
            <pubDate>Tue, 12 Jun 2018 04:00:00 GMT</pubDate>
            <description><![CDATA[A fast parallel stack-based readdir-recursively module with micromatch support.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>A fast parallel stack-based readdir-recursively module with micromatch support.</p>
</blockquote>
<h2 id="install">Install <a class="header-anchor" href="#install" aria-hidden="true">¶</a></h2>
<p>Install with <a href="https://www.npmjs.com" class="external-a" target="_blank" rel="noopener">npm</a>:</p>
<pre><code class="hljs language-sh">$ npm i get-all-files --save
</code></pre>
<h2 id="usage">Usage <a class="header-anchor" href="#usage" aria-hidden="true">¶</a></h2>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> getAllFiles = <span class="hljs-built_in">require</span>(<span class="hljs-string">'get-all-files'</span>)

<span class="hljs-comment">// All files</span>
getAllFiles(<span class="hljs-string">'path/to/dir/or/file'</span>).then(<span class="hljs-built_in">console</span>.log)

<span class="hljs-comment">// All JavaScript files</span>
getAllFiles(<span class="hljs-string">'path/to/dir/or/file'</span>, <span class="hljs-string">'*.js'</span>, {<span class="hljs-attr">matchBase</span>: <span class="hljs-literal">true</span>}).then(<span class="hljs-built_in">console</span>.log)

<span class="hljs-comment">// All files where their path is all lowercase</span>
getAllFiles(
  <span class="hljs-string">'path/to/a/dir/or/file'</span>,
  filename =&gt; filename.toLowerCase() === filename
).then(<span class="hljs-built_in">console</span>.log)

<span class="hljs-comment">// A combination of options</span>
getAllFiles(
  <span class="hljs-string">'path/to/dir/or/file'</span>,
  [<span class="hljs-string">'*.js'</span>, <span class="hljs-string">'foo*'</span>, filename =&gt; filename.toLowerCase() === filename],
  {<span class="hljs-attr">matchBase</span>: <span class="hljs-literal">true</span>}
).then(<span class="hljs-built_in">console</span>.log)
</code></pre>
<h2 id="method">Method <a class="header-anchor" href="#method" aria-hidden="true">¶</a></h2>
<p><code>getAllFiles(filename, arr, opt) -&gt; Promise&lt;Array&lt;string&gt;&gt;</code></p>
<p>If the provided path is a file, an array containing the file path will be resolved in the promise. Otherwise it creates an array containing the file paths of all files recursively in the given directory.</p>
<p>The array is filtered by the given glob pattern(s) and/or predicate(s) and returned as a promise.</p>
<p>Parameters:</p>
<ul>
<li><code>filename</code> : <code>string</code> - A path to a file or directory.</li>
<li><code>arr</code> : <code>string | function(filename) -&gt; boolean | Array&lt;string | function(filename) -&gt; boolean&gt;</code> (optional) - A string glob pattern, a function taking a file path and returning a boolean, or an array of containing any number of of the former two options.</li>
<li><code>opt</code> : <code>object</code> (optional) - An options object for the <a href="https://www.npmjs.com/package/micromatch" class="external-a" target="_blank" rel="noopener">micromatch</a> module.</li>
</ul>
<h2 id="contributing">Contributing <a class="header-anchor" href="#contributing" aria-hidden="true">¶</a></h2>
<p>Pull requests and stars on the <a href="https://github.com/TomerAberbach/get-all-files" class="external-a" target="_blank" rel="noopener">GitHub repository</a> are always welcome. For bugs and feature requests, <a href="https://github.com/TomerAberbach/get-all-files/issues/new" class="external-a" target="_blank" rel="noopener">please create an issue</a>.</p>
<h2 id="running-tests">Running Tests <a class="header-anchor" href="#running-tests" aria-hidden="true">¶</a></h2>
<p>Install dev dependencies:</p>
<pre><code class="hljs language-sh">$ npm i -d &amp;&amp; npm <span class="hljs-built_in">test</span>
</code></pre>
<h2 id="benchmarking">Benchmarking <a class="header-anchor" href="#benchmarking" aria-hidden="true">¶</a></h2>
<p>Install dev dependencies:</p>
<pre><code class="hljs language-sh">$ npm i -d &amp;&amp; npm run benchmark
</code></pre>
<p>Sample output (lower is less time):</p>
<pre><code class="hljs">Results from reading node_modules:
  get-all-files: 0.011025358324145534
  recur-readdir: 0.013531799729364006
  recursive-readdir: 0.01763668430335097
  recursive-files: 0.023923444976076555
  all-files-in-tree: 0.033444816053511704
  fs-readdir-recursive: 0.07518796992481203
</code></pre>
<h2 id="license">License <a class="header-anchor" href="#license" aria-hidden="true">¶</a></h2>
<p>Copyright © 2018 Tomer Aberbach
Released under the <a href="https://github.com/TomerAberbach/get-all-files/blob/master/LICENSE" class="external-a" target="_blank" rel="noopener">MIT license</a>.</p>
]]></content:encoded>
            <author>tomeraberbach@gmail.com (Tomer Aberbach)</author>
            <enclosure url="https://tomeraberba.ch/img/post/get-all-files.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[Tomer Aberbach]]></title>
            <link>https://tomeraberba.ch/html/post/tcnj-linux-vpn.html</link>
            <guid>https://tomeraberba.ch/html/post/tcnj-linux-vpn.html</guid>
            <pubDate>Sun, 10 Jun 2018 04:00:00 GMT</pubDate>
            <description><![CDATA[A tutorial inspired by the lack of official support for a TCNJ Linux VPN.]]></description>
            <content:encoded><![CDATA[<p>If at any point in this tutorial a command fails, install the recommended package using <code>sudo apt-get install &lt;package name&gt;</code>, where <code>&lt;package name&gt;</code> should be replaced by an actual package name.</p>
<h2 id="steps">Steps <a class="header-anchor" href="#steps" aria-hidden="true">¶</a></h2>
<ol>
<li>
<p>Run the following command to install the library required to run the VPN:</p>
<pre><code class="hljs language-sh">$ sudo apt-get install openconnect
</code></pre>
</li>
<li>
<p>Create a file named <code>tcnj-vpn</code> (no file extension) and write the following code to it using your favorite text editor:</p>
<pre><code class="hljs language-bash"><span class="hljs-meta">#!/bin/bash</span>
sudo openconnect --protocol=gp vpn-gw-ft.tcnj.edu --quiet --user=username
</code></pre>
<p><code>username</code> should be replaced by your TCNJ username.</p>
</li>
<li>
<p>Run the following command to ensure the file is executable:</p>
<pre><code class="hljs language-sh">$ chmod u+x tcnj-vpn
</code></pre>
</li>
<li>
<p>Move the file named <code>tcnj-vpn</code> to the directory <code>/usr/bin</code>. You may be unable to do this using the standard drag-and-drop GUI due to root privileges requirements. In that case run the following command:</p>
<pre><code class="hljs language-sh">$ sudo mv tcnj-vpn /usr/bin
</code></pre>
</li>
<li>
<p>Set up <a href="https://security.tcnj.edu/resources-tips/duo-multifactor-authentication" class="external-a" target="_blank" rel="noopener">multifactor authentication with Duo</a> (TCNJ requires it).</p>
</li>
</ol>
<h2 id="conclusion">Conclusion <a class="header-anchor" href="#conclusion" aria-hidden="true">¶</a></h2>
<p>You have successfully configured your TCNJ Linux VPN!</p>
<p>To connect to the VPN simply run the following command from any directory, enter your password when prompted, and authenticate via the device you set up with Duo:</p>
<pre><code class="hljs language-sh">$ tcnj-vpn
</code></pre>
<p>You may ignore any output unrelated to incorrect credentials.</p>
<p>Note that you will be unable to work from the terminal window where you ran the command so simply open another terminal window if you wish to continue working. Alternatively you could run the command in the background.</p>
<p>To disconnect simply open the terminal window where you ran the <code>tcnj-vpn</code> command and press <kbd>CTRL+C</kbd>.</p>
]]></content:encoded>
            <author>tomeraberbach@gmail.com (Tomer Aberbach)</author>
            <enclosure url="https://tomeraberba.ch/img/post/tcnj-linux-vpn.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[Tomer Aberbach]]></title>
            <link>https://tomeraberba.ch/html/post/my-groupme-bot.html</link>
            <guid>https://tomeraberba.ch/html/post/my-groupme-bot.html</guid>
            <pubDate>Wed, 23 May 2018 04:00:00 GMT</pubDate>
            <description><![CDATA[A simple GroupMe bot building and hosting module.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>A simple GroupMe bot building and hosting module.</p>
</blockquote>
<h2 id="install">Install <a class="header-anchor" href="#install" aria-hidden="true">¶</a></h2>
<p>Install with <a href="https://www.npmjs.com" class="external-a" target="_blank" rel="noopener">npm</a>:</p>
<pre><code class="hljs language-sh">$ npm i my-groupme-bot --save
</code></pre>
<h2 id="usage">Usage <a class="header-anchor" href="#usage" aria-hidden="true">¶</a></h2>
<h3 id="dad-bot">Dad Bot <a class="header-anchor" href="#dad-bot" aria-hidden="true">¶</a></h3>
<p>The bot, inspired by dads everywhere, takes any declarations about yourself very literally.</p>
<p>Example:</p>
<pre><code class="hljs">User: I'm feeling great today
Bot: Hi feeling great today, I'm dad!
</code></pre>
<p>Code:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> bot = <span class="hljs-built_in">require</span>(<span class="hljs-string">'my-groupme-bot'</span>)

bot.config(<span class="hljs-string">'YOUR_BOT_ID'</span>)
  .pattern(
    <span class="hljs-regexp">/(i'?m|i\s+am)\s+[^.?!]*[.?!]?/gi</span>,
    (message, matches) =&gt; bot.send(matches.map(<span class="hljs-function"><span class="hljs-params">match</span> =&gt;</span>
      <span class="hljs-string">`Hi <span class="hljs-subst">${match.trim().replace(<span class="hljs-regexp">/^(i'?m|i\s+am)\s+/gi</span>, <span class="hljs-string">''</span>)}</span>, I'm dad!`</span>
    ).join(<span class="hljs-string">'\n'</span>))
  ).listen(process.env.PORT)
</code></pre>
<h3 id="ted-and-robin-bot">Ted and Robin Bot <a class="header-anchor" href="#ted-and-robin-bot" aria-hidden="true">¶</a></h3>
<p>The bot, inpired by How I Met Your Mother, salutes any army, navy, etc. officer mentioned in a chat!</p>
<p>Example:</p>
<pre><code class="hljs">User: Well yeah, that's the general idea
Bot: *salutes* general idea
</code></pre>
<p>Code:</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> bot = <span class="hljs-built_in">require</span>(<span class="hljs-string">'my-groupme-bot'</span>)

bot.config(<span class="hljs-string">'YOUR_BOT_ID'</span>)
  .pattern(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">`(<span class="hljs-subst">${[
    <span class="hljs-string">'general'</span>,
    <span class="hljs-string">'private'</span>,
    <span class="hljs-string">'corporal'</span>,
    <span class="hljs-string">'lieutenant'</span>,
    <span class="hljs-string">'major'</span>,
    <span class="hljs-string">'captain'</span>,
    <span class="hljs-string">'admiral'</span>,
    <span class="hljs-string">'colonel'</span>,
    <span class="hljs-string">'kernel'</span>,
    <span class="hljs-string">'sergeant'</span>,
    <span class="hljs-string">'specialist'</span>,
    <span class="hljs-string">'marine'</span>,
    <span class="hljs-string">'officer'</span>
  ].join(<span class="hljs-string">'|'</span>)}</span>)[^.]*\\.?`</span>, <span class="hljs-string">'gi'</span>),
    (message, matches) =&gt; bot.send(matches.map(<span class="hljs-function"><span class="hljs-params">match</span> =&gt;</span> <span class="hljs-string">`*salutes* <span class="hljs-subst">${match.trim()}</span>`</span>).join(<span class="hljs-string">'\n'</span>))
  ).listen(process.env.PORT)
</code></pre>
<p>Documentation for the all the functions can be found <a href="https://tomeraberba.ch/my-groupme-bot/module-my-groupme-bot.html" class="external-a" target="_blank" rel="noopener">here</a>.</p>
<h2 id="contributing">Contributing <a class="header-anchor" href="#contributing" aria-hidden="true">¶</a></h2>
<p>Pull requests and stars on the <a href="https://github.com/TomerAberbach/my-groupme-bot" class="external-a" target="_blank" rel="noopener">GitHub repository</a> are always welcome. For bugs and feature requests, <a href="https://github.com/TomerAberbach/my-groupme-bot/issues/new" class="external-a" target="_blank" rel="noopener">please create an issue</a>.</p>
<h2 id="running-tests">Running Tests <a class="header-anchor" href="#running-tests" aria-hidden="true">¶</a></h2>
<p>Install dev dependencies:</p>
<pre><code class="hljs language-sh">$ npm i -d &amp;&amp; npm <span class="hljs-built_in">test</span>
</code></pre>
<h2 id="license">License <a class="header-anchor" href="#license" aria-hidden="true">¶</a></h2>
<p>Copyright © 2018 Tomer Aberbach
Released under the <a href="https://github.com/TomerAberbach/my-groupme-bot/blob/master/LICENSE" class="external-a" target="_blank" rel="noopener">MIT license</a>.</p>
]]></content:encoded>
            <author>tomeraberbach@gmail.com (Tomer Aberbach)</author>
            <enclosure url="https://tomeraberba.ch/img/post/my-groupme-bot.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[Tomer Aberbach]]></title>
            <link>https://tomeraberba.ch/html/post/piano.html</link>
            <guid>https://tomeraberba.ch/html/post/piano.html</guid>
            <pubDate>Sat, 19 May 2018 04:00:00 GMT</pubDate>
            <description><![CDATA[A resizable and responsive iframe embeddable piano chords display and player.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>A resizable and responsive iframe embeddable piano chords display and player.</p>
</blockquote>
<h2 id="usage">Usage <a class="header-anchor" href="#usage" aria-hidden="true">¶</a></h2>
<p>The following HTML displays playable chords:</p>
<h3 id="cmaj">Cmaj <a class="header-anchor" href="#cmaj" aria-hidden="true">¶</a></h3>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"0"</span>
        <span class="hljs-attr">width</span>=<span class="hljs-string">"800px"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"400px"</span>
        <span class="hljs-attr">src</span>=<span class="hljs-string">"https://tomeraberba.ch/piano#cmaj"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span>
</code></pre>
<iframe frameborder="0" width="800px" height="400px" src="https://tomeraberba.ch/piano#cmaj"></iframe>
<h3 id="amaj%2C-emaj%2C-f%23min%2C-dmaj">Amaj, Emaj, F#min, Dmaj <a class="header-anchor" href="#amaj%2C-emaj%2C-f%23min%2C-dmaj" aria-hidden="true">¶</a></h3>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"0"</span>
        <span class="hljs-attr">width</span>=<span class="hljs-string">"1200px"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"400px"</span>
        <span class="hljs-attr">src</span>=<span class="hljs-string">"https://tomeraberba.ch/piano#amaj,emaj,f#min,dmaj"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span>
</code></pre>
<iframe frameborder="0" width="1200px" height="300px" src="https://tomeraberba.ch/piano#amaj,emaj,f#min,dmaj"></iframe>
<h3 id="cmaj7%2C-c%23min7b5%2C-dmin7%2C-ddim7-with-play-button">Cmaj7, C#min7b5, Dmin7, Ddim7 With Play Button <a class="header-anchor" href="#cmaj7%2C-c%23min7b5%2C-dmin7%2C-ddim7-with-play-button" aria-hidden="true">¶</a></h3>
<pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"0"</span>
        <span class="hljs-attr">width</span>=<span class="hljs-string">"1200px"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"400px"</span>
        <span class="hljs-attr">src</span>=<span class="hljs-string">"https://tomeraberba.ch/piano?progression=true#cmaj7,c#min7b5,dmin7,ddim7"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span>
</code></pre>
<iframe frameborder="0" width="1200px" height="400px" src="https://tomeraberba.ch/piano?progression=true#cmaj7,c#min7b5,dmin7,ddim7"></iframe>
<h2 id="contributing">Contributing <a class="header-anchor" href="#contributing" aria-hidden="true">¶</a></h2>
<p>Pull requests and stars on the <a href="https://github.com/TomerAberbach/piano" class="external-a" target="_blank" rel="noopener">GitHub repository</a> are always welcome. For bugs and feature requests, <a href="https://github.com/TomerAberbach/piano/issues/new" class="external-a" target="_blank" rel="noopener">please create an issue</a>.</p>
<h2 id="license">License <a class="header-anchor" href="#license" aria-hidden="true">¶</a></h2>
<p>Copyright © 2018 Tomer Aberbach
Released under the <a href="https://github.com/TomerAberbach/piano/blob/master/LICENSE" class="external-a" target="_blank" rel="noopener">MIT license</a>.</p>
]]></content:encoded>
            <author>tomeraberbach@gmail.com (Tomer Aberbach)</author>
            <enclosure url="https://tomeraberba.ch/img/post/piano.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[Tomer Aberbach]]></title>
            <link>https://tomeraberba.ch/html/post/spotify-personal.html</link>
            <guid>https://tomeraberba.ch/html/post/spotify-personal.html</guid>
            <pubDate>Sun, 29 Apr 2018 04:00:00 GMT</pubDate>
            <description><![CDATA[A Spotify authorization code flow implementation for local personal use.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>A Spotify authorization code flow implementation for local personal use.</p>
</blockquote>
<h2 id="install">Install <a class="header-anchor" href="#install" aria-hidden="true">¶</a></h2>
<p>Install with <a href="https://www.npmjs.com" class="external-a" target="_blank" rel="noopener">npm</a>:</p>
<pre><code class="hljs language-sh">$ npm i spotify-personal-auth --save
</code></pre>
<h2 id="usage">Usage <a class="header-anchor" href="#usage" aria-hidden="true">¶</a></h2>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> auth = <span class="hljs-built_in">require</span>(<span class="hljs-string">'spotify-personal-auth'</span>)
<span class="hljs-keyword">const</span> SpotifyWebApi = <span class="hljs-built_in">require</span>(<span class="hljs-string">'spotify-web-api-node'</span>)

<span class="hljs-comment">// Configure module</span>
auth.config({
  <span class="hljs-attr">clientId</span>: <span class="hljs-string">'YOUR_CLIENT_ID'</span>, <span class="hljs-comment">// Replace with your client id</span>
  clientSecret: <span class="hljs-string">'YOUR_CLIENT_SECRET'</span>, <span class="hljs-comment">// Replace with your client secret</span>
  scope: [<span class="hljs-string">'user-modify-playback-state'</span>, <span class="hljs-string">'user-top-read'</span>], <span class="hljs-comment">// Replace with your array of needed Spotify scopes</span>
  path: <span class="hljs-string">'/path/to/a/tokens.json'</span> <span class="hljs-comment">// Optional path to file to save tokens (will be created for you)</span>
})

<span class="hljs-keyword">const</span> api = <span class="hljs-keyword">new</span> SpotifyWebApi()

<span class="hljs-comment">/* Get token promise, the token will refresh if this is called when it has expired,
 * But you can get the refresh token if you would rather handle it
 * It is resolve as an array containing the token and refresh as shown below
 */</span>
auth.token().then(<span class="hljs-function">(<span class="hljs-params">[token, refresh]</span>) =&gt;</span> {
  <span class="hljs-comment">// Sets api access and refresh token</span>
  api.setAccessToken(token)
  api.setRefreshToken(refresh)

  <span class="hljs-keyword">return</span> api.getMyTopTracks()
}).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span>
  <span class="hljs-comment">// Plays user's top tracks</span>
  api.play({
    <span class="hljs-attr">uris</span>: data[<span class="hljs-string">'body'</span>][<span class="hljs-string">'items'</span>].map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item[<span class="hljs-string">'uri'</span>])
  })
).catch(<span class="hljs-built_in">console</span>.log)
</code></pre>
<h2 id="contributing">Contributing <a class="header-anchor" href="#contributing" aria-hidden="true">¶</a></h2>
<p>Pull requests and stars on the <a href="https://github.com/TomerAberbach/spotify-personal-auth" class="external-a" target="_blank" rel="noopener">GitHub repository</a> are always welcome. For bugs and feature requests, <a href="https://github.com/TomerAberbach/spotify-personal-auth/issues/new" class="external-a" target="_blank" rel="noopener">please create an issue</a>.</p>
<h2 id="running-tests">Running Tests <a class="header-anchor" href="#running-tests" aria-hidden="true">¶</a></h2>
<p>Install dev dependencies:</p>
<pre><code class="hljs language-sh">$ npm i -d &amp;&amp; npm <span class="hljs-built_in">test</span>
</code></pre>
<h2 id="license">License <a class="header-anchor" href="#license" aria-hidden="true">¶</a></h2>
<p>Copyright © 2018 Tomer Aberbach
Released under the <a href="https://github.com/TomerAberbach/spotify-personal-auth/blob/master/LICENSE" class="external-a" target="_blank" rel="noopener">MIT license</a>.</p>
]]></content:encoded>
            <author>tomeraberbach@gmail.com (Tomer Aberbach)</author>
            <enclosure url="https://tomeraberba.ch/img/post/spotify-personal.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[Tomer Aberbach]]></title>
            <link>https://tomeraberba.ch/html/post/mano-computer.html</link>
            <guid>https://tomeraberba.ch/html/post/mano-computer.html</guid>
            <pubDate>Sun, 01 Oct 2017 04:00:00 GMT</pubDate>
            <description><![CDATA[An assembler and hardware simulator for the Mano Basic Computer, a 16 bit computer.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>An assembler and hardware simulator for the Mano Basic Computer, a 16 bit computer.</p>
</blockquote>
<p>This is a JavaFX application which compiles assembly code for and runs a simulation of Mano’s Computer as detailed in:</p>
<p>Computer System Architecture, 3rd edition
by M. Morris Mano
Published by Prentice-Hall, c 1993
Chapter 5, pp 123-172.</p>
<h2 id="usage">Usage <a class="header-anchor" href="#usage" aria-hidden="true">¶</a></h2>
<p>Download the latest jar from <a href="https://github.com/TomerAberbach/mano-simulator/releases" class="external-a" target="_blank" rel="noopener">releases</a> and then run:</p>
<pre><code class="hljs language-sh">$ java -jar mano-simulator.jar
</code></pre>
<h2 id="contributing">Contributing <a class="header-anchor" href="#contributing" aria-hidden="true">¶</a></h2>
<p>Pull requests and stars on the <a href="https://github.com/TomerAberbach/mano-simulator" class="external-a" target="_blank" rel="noopener">GitHub repository</a> are always welcome. For bugs and feature requests, <a href="https://github.com/TomerAberbach/mano-simulator/issues/new" class="external-a" target="_blank" rel="noopener">please create an issue</a>.</p>
<h2 id="license">License <a class="header-anchor" href="#license" aria-hidden="true">¶</a></h2>
<p>Copyright © 2018 Tomer Aberbach
Released under the <a href="https://github.com/TomerAberbach/mano-simulator/blob/master/LICENSE" class="external-a" target="_blank" rel="noopener">MIT license</a>.</p>
]]></content:encoded>
            <author>tomeraberbach@gmail.com (Tomer Aberbach)</author>
            <enclosure url="https://tomeraberba.ch/img/post/mano-computer.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[Tomer Aberbach]]></title>
            <link>https://tomeraberba.ch/html/post/four-year-plan.html</link>
            <guid>https://tomeraberba.ch/html/post/four-year-plan.html</guid>
            <pubDate>Wed, 04 Jan 2017 05:00:00 GMT</pubDate>
            <description><![CDATA[A LaTeX document for a four year college plan!]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>A LaTeX document for a four year college plan!</p>
</blockquote>
<h2 id="usage">Usage <a class="header-anchor" href="#usage" aria-hidden="true">¶</a></h2>
<p>Clone the repository:</p>
<pre><code class="hljs language-sh">$ git <span class="hljs-built_in">clone</span> https://github.com/TomerAberbach/four-year-plan.git
</code></pre>
<p>Edit the command arguments in <code>main.tex</code> and then use a tool such as <a href="https://www.tug.org/applications/pdftex" class="external-a" target="_blank" rel="noopener">pdftex</a> to compile.</p>
<h2 id="contributing">Contributing <a class="header-anchor" href="#contributing" aria-hidden="true">¶</a></h2>
<p>Pull requests and stars on the <a href="https://github.com/TomerAberbach/four-year-plan" class="external-a" target="_blank" rel="noopener">GitHub repository</a> are always welcome. For bugs and feature requests, <a href="https://github.com/TomerAberbach/four-year-plan/issues/new" class="external-a" target="_blank" rel="noopener">please create an issue</a>.</p>
<h2 id="license">License <a class="header-anchor" href="#license" aria-hidden="true">¶</a></h2>
<p>Copyright © 2018 Tomer Aberbach
Released under the <a href="https://github.com/TomerAberbach/four-year-plan/blob/master/LICENSE" class="external-a" target="_blank" rel="noopener">MIT license</a>.</p>
]]></content:encoded>
            <author>tomeraberbach@gmail.com (Tomer Aberbach)</author>
            <enclosure url="https://tomeraberba.ch/img/post/four-year-plan.png">
            </enclosure>
        </item>
    </channel>
</rss>